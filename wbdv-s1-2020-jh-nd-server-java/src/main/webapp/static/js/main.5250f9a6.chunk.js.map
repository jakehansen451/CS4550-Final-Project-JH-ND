{"version":3,"sources":["api/GoogleAPIService.js","components/HomeComponent.js","store/Actions.js","components/Search/SearchComponent.js","utils/DateUtils.js","store/Reducers.js","store/Store.js","components/Details/DetailsComponent.js","components/Results/ResultsComponent.js","utils/Utils.js","components/LoginComponent.js","components/TutorMeComponent.js","App.js","serviceWorker.js","index.js"],"names":["GoogleAuth","HomeComponent","className","to","selectTime","time_block","type","SearchComponent","admin","props","users","filter","user","role","tutors","students","renderUser","userSelected","selected_users","includes","key","_id","onClick","deselectUser","selectUser","lastName","concat","firstName","this","map","tutor","student","length","React","Component","connect","state","dispatch","selected_user","deselected_user","localFromUTCDateTime","date","time","format","ISOStr","datetime","Date","toLocaleTimeString","UTCFromLocalTime","d","millis","getUTCMilliseconds","toString","padStart","toUTCString","split","fakeState","username","password","email","phone","roleData","coursesTutor","officeHours","events","sleep_times","coursesEnrolled","selectedUsers","selected_time_block","action","selectedTimeBlock","googleAuth","rootReducer","store","createStore","SCOPE","calendarId","initClient","callback","gapi","client","init","then","auth2","getAuthInstance","currentUser","get","hasGrantedScopes","signIn","handleClientLoad","load","getEventsList","calendar","list","toISOString","response","result","items","addEvent","startDateTime","endDateTime","attendees","title","event","insert","console","log","DetailsComponent","createUserOption","value","addMeeting","start","end","googleService","startLocal","DateUtils","endLocal","onChange","target","Actions","days","fake_time_blocks","ResultsComponent","free_time_blocks","recomposeISO","renderFreeTimeBlock","timeSlot","index","start_datetime","end_datetime","getDay","replace","eventTimes","dateTime","substring","obj","Object","keys","LoginComponent","makeGoogleRequest","oauth","isUserSignedIn","TutorMeComponent","path","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5250f9a6.chunk.js","sourcesContent":["import {gapi} from 'gapi-script';\nimport store from '../store/Store';\nimport * as Actions from '../store/Actions';\n\nlet GoogleAuth;\nconst SCOPE = 'https://www.googleapis.com/auth/calendar';\nconst CLIENT_ID = '46098970829-859lp0f58tvg2o77h1g8iclvgpflf17v.apps.googleusercontent.com';\n\nlet API_KEY = \"AIzaSyBNECVLm6gneH9sx6OT1DZLzqsFEhuCNCA\";\nlet calendarId = \"5op33saotih66kdu8inudbuca4@group.calendar.google.com\"; // TutorMe calendar's id\n\n\nconst handleClientLoad = (callback) => {\n    // Load the API's client and auth2 modules.\n    // Call the initClient function after the modules load.\n    gapi.load('client:auth2', () => initClient(callback));\n\n};\n\nconst initClient = (callback) => {\n    // Retrieve the discovery document for version 3 of Google Drive API.\n    // In practice, your app can retrieve one or more discovery documents.\n    let discoveryUrl = \"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\";\n\n    // Initialize the gapi.client object, which app uses to make API requests.\n    // Get API key and client ID from API Console.\n    // 'scope' field specifies space-delimited list of access scopes.\n    gapi.client.init({\n        'apiKey': API_KEY,\n        'clientId': CLIENT_ID,\n        'discoveryDocs': [discoveryUrl],\n        'scope': SCOPE\n    }).then(function () {\n        GoogleAuth = gapi.auth2.getAuthInstance();\n        let user = GoogleAuth.currentUser.get();\n        let isAuthorized = user.hasGrantedScopes(SCOPE);\n        if (!isAuthorized) {\n            signIn();\n        }\n\n        store.dispatch({type: Actions.SET_GOOGLE_AUTH, googleAuth: GoogleAuth});\n        callback();\n    });\n};\n\nconst signIn = () => {\n    GoogleAuth.signIn();\n};\n\n\nconst getEventsList = () => {\n    return gapi.client.calendar.events.list({\n        'calendarId': calendarId,\n        'timeMin': (new Date()).toISOString(),\n        'showDeleted': false,\n        'singleEvents': true,\n        'orderBy': 'startTime'\n    }).then((response) => {\n        return  response.result.items;\n    });\n};\n\nconst addEvent = (startDateTime, endDateTime, attendees, title) => {\n    let event = {\n        'summary': title,\n        'start': {\n            'dateTime': startDateTime\n        },\n        'end': {\n            'dateTime': endDateTime\n        },\n        'attendees': attendees\n    };\n\n    gapi.client.calendar.events.insert({\n        'calendarId': calendarId,\n        'resource': event\n    }).then((response) => console.log(response.result));\n\n};\n\n\nexport default {\n    handleClientLoad,\n    signIn,\n    getEventsList,\n    addEvent\n}","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nconst HomeComponent = () => (\n    <div>\n        <div className=\"list-group\">\n            <Link className=\"list-group-item\" to=\"/search\">Search</Link>\n            <Link className=\"list-group-item\" to=\"/results\">Results</Link>\n            <Link className=\"list-group-item\" to=\"/details\">Details</Link>\n            <Link className=\"list-group-item\" to=\"/login\">Login</Link>\n        </div>\n    </div>\n);\n\nexport default HomeComponent;\n","// Actions\nexport const SELECT_USER = 'SELECT_USER';\nexport const DESELECT_USER = 'DESELECT_USER';\nexport const SELECT_TIME = 'SELECT_TIME';\nexport const SET_GOOGLE_AUTH = \"SET_GOOGLE_AUTH\";\n\n// Action creators\nexport const selectUser = (selected_user) => {\n  return {type: SELECT_USER, selected_user}\n};\n\nexport const deselectUser = (deselected_user) => {\n  return {type: DESELECT_USER, deselected_user}\n};\n\nexport const selectTime = (time_block) => {\n  return {type: SELECT_TIME, time_block}\n};\n\nexport const setGoogleAuth = (googleAuth) => {\n  return {type: SET_GOOGLE_AUTH, googleAuth}\n};","import React from \"react\"\nimport { connect } from 'react-redux'\nimport * as Actions from '../../store/Actions'\nimport { Link } from 'react-router-dom'\nimport './SearchComponent.css'\n\nclass SearchComponent extends React.Component {\n  admin = this.props.users.filter((user) => user.role === 'admin');\n  tutors = this.props.users.filter((user) => user.role === 'tutor');\n  students = this.props.users.filter((user) => user.role === 'student');\n\n  renderUser = (user) => {\n    const userSelected = this.props.selected_users.includes(user);\n    return (\n        <div\n            className={userSelected\n                ? 'wbdv-user-row wbdv-selected-user'\n                : 'wbdv-user-row'}\n            key={user._id}\n            onClick={() => {\n              if (!userSelected) { this.props.selectUser(user); }\n              else { this.props.deselectUser(user); }\n            }}\n        >\n          {user.lastName.concat(', ', user.firstName)}\n        </div>\n    )\n  };\n\n  render() {\n    return(\n      <div>\n        <h1>Search</h1>\n        <div className='wbdv-three-column-container'>\n          <div className='wbdv-user-column'>\n            <h4>Course Administrators</h4>\n            <div className='wbdv-scroll-column'>\n              {this.admin.map((admin) => this.renderUser(admin))}\n            </div>\n          </div>\n          <div className='wbdv-user-column'>\n            <h4>Tutors</h4>\n            <div className='wbdv-scroll-column'>\n              {this.tutors.map((tutor) => this.renderUser(tutor))}\n            </div>\n          </div>\n          <div className='wbdv-user-column'>\n            <h4>Students</h4>\n            <div className='wbdv-scroll-column'>\n              {this.students.map((student) => this.renderUser(student))}\n            </div>\n          </div>\n        </div>\n        <div className='wbdv-search-btn-chunk'>\n          <h4>\n            {this.props.selected_users.length !== 0\n                ? <Link\n                    className='wbdv-search-btn'\n                    to='/results'\n                >\n                  Search Calendars\n                </Link>\n                : 'Search Calendars'\n            }\n          </h4>\n        </div>\n      </div>\n    )\n  }\n}\n\n\nconst mapStateToProps = (state) => ({\n  users: state.users,\n  selected_users: state.selected_users,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  selectUser: (user) => dispatch(Actions.selectUser(user)),\n  deselectUser: (user) => dispatch(Actions.deselectUser(user)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchComponent);\n","const localFromUTCDateTime = (date, time, format = '') => {\n  const ISOStr = `${date}T${time}Z`;\n  const datetime = new Date(ISOStr);\n  return datetime.toLocaleTimeString(format);\n};\n\nconst UTCFromLocalTime = (date, time) => {\n  const d = new Date(date.concat(' ', time));\n  const millis = d.getUTCMilliseconds().toString().padStart(3, '0');\n  const str = d.toUTCString().split(' ')[4].concat('.', millis);\n  return str;\n};\n\nexport {\n  localFromUTCDateTime,\n  UTCFromLocalTime\n};","import * as Actions from './Actions';\n\nlet fakeState = {\n  users: [\n      {\n        _id: '0',\n        username: 'hansen.j',\n        password: 'password',\n        firstName: 'Jake',\n        lastName: 'Hansen',\n        email: 'hansen.j@husky.neu.edu',\n        phone: '503-348-4863',\n        role: 'admin',\n        roleData: {\n          coursesTutor: ['CS2500'],\n          officeHours: [] // To be populated by Google API\n        },\n        events: [], // To be populated by Google API\n        sleep_times: {\n          /*\n           * Takes the format: X/Y where X is the earliest the user would get\n           * up for an event, and Y is the latest they would stay up for one\n           *\n           * A typical use case would look like: mo: '14:00:00/02:00:00',\n           * meaning a user would be willing to schedule an event any time from\n           * 2pm on Monday to 2am on Tuesday\n           *\n           *\n           * If Y is later in the day than X from the next day, that indicates\n           * the user has no preference and would schedule events at any time\n           * that day\n           *\n           * All times are in UTC\n           *\n           * Keyed by integer to allow easy mapping with Date.getDay()\n           */\n          '0': '10:00:00/22:00:00', // Sunday\n          '1': '08:00:00/22:00:00', // Monday\n          '2': '08:00:00/22:00:00', // Tuesday\n          '3': '08:00:00/22:00:00', // Wednesday\n          '4': '08:00:00/22:00:00', // Thursday\n          '5': '08:00:00/00:00:00', // Friday\n          '6': '10:00:00/00:00:00'  // Saturday\n        }\n      },\n      {\n        _id: '1',\n        username: 'damrina.n',\n        password: 'password',\n        firstName: 'Nadiia',\n        lastName: 'Damrina',\n        email: 'damrina.n@husky.neu.edu',\n        phone: '',\n        role: 'tutor',\n        roleData: {\n          coursesTutor: ['CS2500'],\n          coursesEnrolled: ['CS4550'],\n          officeHours: []\n        },\n        events: [],\n        sleep_times: {\n        }\n      },\n      {\n        _id: '2',\n        username: 'annunziato.j',\n        password: 'password',\n        firstName: 'Jose',\n        lastName: 'Annunziato',\n        email: 'annunziato.j@northeastern.edu',\n        phone: '',\n        role: 'student',\n        roleData: {\n          coursesEnrolled: ['CS2500']\n        },\n        events: [],\n        sleep_times: {\n        }\n      },\n    ],\n  selectedUsers: [],\n  selected_time_block: {\n  }\n};\n\nconst selectedUsers = (selected_users = [], action) => {\n  switch(action.type) {\n    case Actions.SELECT_USER:\n      return [...selected_users, action.selected_user];\n    case Actions.DESELECT_USER:\n      return selected_users.filter((user) => user._id !== action.deselected_user._id);\n    default:\n      return selected_users;\n  }\n};\n\nconst selectedTimeBlock = (selected_time_block = {}, action) => {\n  switch(action.type) {\n    case Actions.SELECT_TIME:\n      if (action.time_block === selected_time_block) {\n        return {}\n      } else {\n        return action.time_block;\n      }\n    default:\n      return selected_time_block;\n  }\n};\n\nconst googleAuth = (googleAuth = {}, action) => {\n  switch(action.type) {\n    case Actions.SET_GOOGLE_AUTH:\n      return action.googleAuth;\n    default:\n      return googleAuth;\n  }\n};\n\nconst rootReducer = (state = fakeState, action) => {\n  return {\n    users: state.users,\n    selected_users: selectedUsers(state.selected_users, action),\n    selected_time_block: selectedTimeBlock(state.selected_time_block, action),\n    googleAuth: googleAuth(state.googleAuth, action),\n  }\n};\n\nexport default rootReducer;","import rootReducer from './Reducers';\nimport {createStore} from \"redux\";\n\nconst store = createStore(rootReducer);\n\nexport default store","\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport * as Utils from '../../utils/Utils'\nimport * as Actions from \"../../store/Actions\";\nimport * as DateUtils from '../../utils/DateUtils'\nimport googleService from \"../../api/GoogleAPIService\";\n\nimport './DetailsComponent.css'\n\nclass DetailsComponent extends React.Component {\n    componentDidMount() {\n        googleService.handleClientLoad(() => {})\n    }\n\n  createUserOption = (user) => {\n    return (\n        <option value={user._id}>\n          {`${user.lastName}, ${user.firstName}`}\n        </option>\n    )\n  };\n\n    addMeeting = () => {\n        let date = this.props.selected_time_block.date;\n        let startDateTime = new Date(date + \" \" + this.props.selected_time_block.start + \" UTC\").toISOString();\n        let endDateTime = new Date(date + \" \" + this.props.selected_time_block.end + \" UTC\").toISOString();\n\n        googleService.addEvent(startDateTime, endDateTime, [], \"Demo title\");\n    };\n\n  render() {\n    const time_block = this.props.selected_time_block;\n    const date = time_block.date;\n    const start = time_block.start;\n    const end = time_block.end;\n    const startLocal = DateUtils.localFromUTCDateTime(date, start, 'en-GB');\n    const endLocal = DateUtils.localFromUTCDateTime(date, end, 'en-GB');\n\n    return (\n    // Utils.isEmpty(this.props.selected_time_block)\n    // || this.props.selected_users.length === 0\n    //     ? <div>\n    //         <h1>Details</h1>\n    //         <Link to='/'>\n    //           <h4>Return home</h4>\n    //         </Link>\n    //       </div>\n    //     :\n        <div>\n            <h1>Details</h1>\n            <div>\n              <div>\n                <form className='wbdv-details-form'>\n                  <div className='wbdv-details-form-row'>\n                    <h6>Date:</h6>\n                    <input\n                        type='date'\n                        value={date}\n                        onChange={(event) => this.props.selectTime({\n                          ...this.props.selected_time_block,\n                          date: event.target.value,\n                        })}\n                    />\n                  </div>\n                  <div className='wbdv-details-form-row'>\n                    <h6>Start:</h6>\n                    <input\n                        type='time'\n                        value={startLocal}\n                        onChange={(event) => this.props.selectTime({\n                          ...this.props.selected_time_block,\n                          start: DateUtils.UTCFromLocalTime(date, event.target.value),\n                        })}\n                    />\n                  </div>\n                  <div className='wbdv-details-form-row'>\n                    <h6>End:</h6>\n                    <input\n                        type='time'\n                        value={endLocal}\n                        onChange={(event) => this.props.selectTime({\n                          ...this.props.selected_time_block,\n                          end: DateUtils.UTCFromLocalTime(date, event.target.value),\n                        })}\n                    />\n                  </div>\n                  <div className='wbdv-details-form-row'>\n                    <h6>Host:</h6>\n                    <select>\n                      {this.props.selected_users.map(this.createUserOption)}\n                    </select>\n                  </div>\n                  <div className='wbdv-details-form-row'>\n                    <h6>Type:</h6>\n                    <select>\n                      <option value='PUBLIC'>\n                        Public - anyone can join\n                      </option>\n                      <option value='PRIVATE'>\n                        Private - only invitees can join\n                      </option>\n                    </select>\n                  </div>\n                </form>\n                <Link onClick={this.addMeeting} to='/'>\n                    <h4>Schedule Meeting</h4>\n                </Link>\n              </div>\n            </div>\n          </div>\n  )}\n}\n\nconst mapStateToProps = (state) => ({\n  selected_users: state.selected_users,\n  selected_time_block: state.selected_time_block,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  selectTime: (time_block) => dispatch(Actions.selectTime(time_block))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailsComponent);","import React from \"react\";\nimport {connect} from 'react-redux'\nimport {Link} from 'react-router-dom'\nimport * as Actions from \"../../store/Actions\";\nimport * as Utils from '../../utils/Utils'\nimport googleService from \"../../api/GoogleAPIService\";\n\nimport './ResultsComponent.css'\n\nconst days = ['Sunday', 'Monday', 'Tuesday', 'Wedensday', 'Thursday', 'Friday', 'Saturday'];\n\nconst fake_time_blocks = [\n    {date: '2020-05-29', start: '14:30:00.000', end: '15:30:00.000'},\n    {date: '2020-05-29', start: '17:15:00.000', end: '18:15:00.000'},\n    {date: '2020-05-30', start: '10:00:00.000', end: '12:45:00.000'},\n    {date: '2020-05-30', start: '16:00:00.000', end: '19:00:00.000'},\n    {date: '2020-05-31', start: '08:30:00.000', end: '18:30:00.000'},\n];\n\n\nclass ResultsComponent extends React.Component {\n    state = {\n        free_time_blocks: fake_time_blocks,\n    };\n\n\n    componentDidMount() {\n        googleService.handleClientLoad(() => {\n            // let events = googleService.getEventsList();\n            // events.then((events) => {\n            //     this.parse(events)\n            // })\n        });\n\n\n    }\n\n    parse(events) {\n        const eventTimes = events.map((event) => {\n            const startDateTime = new Date(event.start.dateTime).toISOString();\n            const endDateTime = new Date(event.end.dateTime).toISOString();\n\n\n            return ({start: startDateTime.substring(11, 23),\n                end: endDateTime.substring(11, 23),\n                date: startDateTime.substring(0, 10)\n\n            });\n\n        });\n\n        console.log(eventTimes)\n\n    }\n\n    recomposeISO = (date, time) => `${date}T${time}Z`;\n\n    renderFreeTimeBlock = (timeSlot, index) => {\n        const start_datetime = new Date(this.recomposeISO(timeSlot.date, timeSlot.start));\n        const end_datetime = new Date(this.recomposeISO(timeSlot.date, timeSlot.end));\n        return (\n            <div\n                className={this.props.selected_time_block === timeSlot\n                    ? 'wbdv-time-slot-row wbdv-selected-time'\n                    : 'wbdv-time-slot-row'}\n                key={index}\n                onClick={() => this.props.selectTime(timeSlot)}\n            >\n                <div className='wbdv-time-slot-day'>\n                    {days[start_datetime.getDay()]}\n                </div>\n                <div className='wbdv-time-slot-start'>\n                    {start_datetime.toLocaleTimeString().replace(/(?<=:.{2}):.{2}/, '')}\n                </div>\n                <div className='wbdv-time-slot-end'>\n                    {end_datetime.toLocaleTimeString().replace(/(?<=:.{2}):.{2}/, '')}\n                </div>\n            </div>\n        )\n    };\n\n    renderUser = (user) =>\n        <div className='wbdv-user-row' key={user._id}>\n            {user.lastName.concat(', ', user.firstName)}\n        </div>;\n\n    render() {\n        return (\n            <div>\n                <div className='wbdv-results-page-title-bar'>\n                    <h1>Results</h1>\n                </div>\n                <div className='wbdv-time-select-body'>\n                    <div className='wbdv-user-column'>\n                        <h4>Participants</h4>\n                        <Link to='/search' className='wbdv-edit-participants-button'>\n                            <h6>Edit Participants</h6>\n                        </Link>\n                        <div className='wbdv-scroll-column'>\n                            {this.props.selected_users.map((admin) => this.renderUser(admin))}\n                        </div>\n                    </div>\n                    <div className='wbdv-calendar'>\n                        Placeholder Calendar Component\n                    </div>\n                    <div className='wbdv-time-list'>\n                        <h5>Choose from available times</h5>\n                        <div className='wbdv-time-slot-row'>\n                            <div className='wbdv-time-slot-day'>Day</div>\n                            <div className='wbdv-time-slot-start'>Start</div>\n                            <div className='wbdv-time-slot-end'>End</div>\n                        </div>\n                        {this.state.free_time_blocks.map(this.renderFreeTimeBlock)}\n                        <div className='wbdv-select-time-btn'>\n                            {Utils.isEmpty(this.props.selected_time_block)\n                                ? <h4>Select</h4>\n                                : <Link to='/details'><h4>Select</h4></Link>}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    selected_users: state.selected_users,\n    selected_time_block: state.selected_time_block,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    selectTime: (time_block) => dispatch(Actions.selectTime(time_block)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResultsComponent);","export const isEmpty = (obj) => Object.keys(obj).length === 0;","import React from \"react\";\nimport oauth from \"../api/GoogleAPIService\";\n\nclass LoginComponent extends React.Component {\n\n    componentDidMount() {\n        oauth.handleClientLoad();\n    }\n\n    makeGoogleRequest = () => {\n        let signIn = oauth.isUserSignedIn();\n        if(!signIn) {\n            oauth.signIn()\n        }\n\n        oauth.getEventsList();\n    };\n\n    render() {\n        return (\n            <div>\n                <h1>\n                    User has already given permissions to access the calendar!\n                </h1>\n\n\n                <button className=\"btn btn-primary\" onClick={this.makeGoogleRequest}>\n                    Get TutorMe events\n                </button>\n            </div>\n        );\n    }\n\n}\n\n\nexport default LoginComponent;","import React from 'react';\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport HomeComponent from \"./HomeComponent\";\nimport SearchComponent from \"./Search/SearchComponent\";\nimport DetailsComponent from \"./Details/DetailsComponent\";\nimport ResultsComponent from \"./Results/ResultsComponent\";\n\nimport '../styles.css';\n\nimport LoginComponent from \"./LoginComponent\";\n\nclass TutorMeComponent extends React.Component {\n\n\n    render() {\n        return (\n            <BrowserRouter>\n                <div>\n                    <Route path=\"/\"\n                           exact\n                           component={HomeComponent}/>\n                    <Route path=\"/search\"\n                           exact\n                           component={SearchComponent}/>\n                    <Route path=\"/results\"\n                           exact\n                           component={ResultsComponent}/>\n                    <Route path=\"/details/\"\n                           exact\n                           component={DetailsComponent}/>\n                    <Route path=\"/login/\"\n                           exact\n                           component={LoginComponent}/>\n                </div>\n            </BrowserRouter>\n        )\n    }\n}\n\nexport default TutorMeComponent","\nimport React from 'react'\nimport TutorMeComponent from \"./components/TutorMeComponent\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <TutorMeComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\"\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/Store';\n\n\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/font-awesome/css/font-awesome.min.css';\nimport './index.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}